diff -Nur -x '*.orig' -x '*.rej' smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/auth/auth_cvm_unix_local mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/auth/auth_cvm_unix_local
--- smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/auth/auth_cvm_unix_local	2005-08-19 15:31:02.000000000 -0600
+++ mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/auth/auth_cvm_unix_local	1969-12-31 17:00:00.000000000 -0700
@@ -1,109 +0,0 @@
-#!/usr/bin/perl -w
-
-=head1 NAME
-
-auth_cvm_unix_local - SMTP AUTH LOGIN module using 
-Bruce Guenther's Credential Validation Module (CVM) 
-    http://untroubled.org/cvm/
-
-=head1 SYNOPSIS
-
-In config/plugins:
-
-  auth/auth_cvm_unix_local \
-	cvm_socket /var/lib/cvm/cvm-unix-local.socket	\
-	enable_smtp no \
-	enable_ssmtp yes
-
-=head1 BUGS
-
-- Should probably handle auth-cram-md5 as well. However, this requires
-access to the plain text password. We could store a separate database
-of passwords purely for SMTP AUTH, for example as an optional 
-SMTPAuthPassword property of an account in the esmith::AccountsDB;
-
-- Returns DENY if AUTH fails - there should probably be an option of 
-  DECLINE or DENY.
-
-=head1 DESCRIPTION
-
-This plugin implements an authentication plugin using Bruce Guenther's
-Credential Validation Module (http://untroubled.org/cvm).
-
-=head1 AUTHOR
-
-Copyright 2005 Gordon Rowell <gordonr@gormand.com.au>
-
-This software is free software and may be distributed or modified
-under the same terms as Perl itself.
-
-=head1 VERSION
-
-Version $Id: auth_cvm_unix_local,v 1.1 2005/06/09 22:50:06 gordonr Exp gordonr $
-
-=cut
-
-use Socket;
-use constant SMTP_PORT => getservbyname("smtp", "tcp") || 25;
-use constant SSMTP_PORT => getservbyname("ssmtp", "tcp") || 465;
-
-sub register 
-{
-    my ( $self, $qp, %arg ) = @_;
-
-    unless ($arg{cvm_socket})
-    {
-        $self->log(LOGERROR, "authcvm - requires cvm_socket argument");
-        return 0;
-    }
-
-    $self->{_enable_smtp} = $arg{enable_smtp} || 'no';
-    $self->{_enable_ssmtp} = $arg{enable_ssmtp} || 'yes';
-
-    my $port = $ENV{PORT} || SMTP_PORT;
-
-    return 0 if ($port == SMTP_PORT and $self->{_enable_smtp} ne 'yes');
-    return 0 if ($port == SSMTP_PORT and $self->{_enable_ssmtp} ne 'yes');
-
-    if ($arg{cvm_socket} =~ /^([\w\/.-]+)$/)
-    {
-        $self->{_cvm_socket} = $1;
-    }
-
-    unless (-S $self->{_cvm_socket})
-    {
-	$self->log(LOGERROR, "authcvm - cvm_socket missing or not usable");
-	return 0;
-    }
-
-    $self->register_hook("auth-plain", "authcvm_plain");
-    $self->register_hook("auth-login", "authcvm_plain");
-#    $self->register_hook("auth-cram-md5", "authcvm_hash");
-}
-
-sub authcvm_plain
-{
-    my ( $self, $transaction, $method, $user, $passClear, $passHash, $ticket ) =
-      @_;
-
-    $self->log(LOGINFO, "authcvm/$method authentication attempt for: $user");
-
-    socket(SOCK, PF_UNIX, SOCK_STREAM, 0) 
-        or return (DENY, "authcvm/$method");
-
-    connect(SOCK, sockaddr_un($self->{_cvm_socket}))
-        or return (DENY, "authcvm/$method");
-
-    my $o = select(SOCK); $| = 1; select($o);
-
-    my ($u, $host) = split(/\@/, $user);
-    $host ||= "localhost";
-
-    print SOCK "\001$u\000$host\000$passClear\000\000";
-
-    shutdown SOCK, 1;
-
-    my $ret = <SOCK>;
-    my ($s) = unpack ("C", $ret);
-    return (($s ? DENY : OK), "authcvm/$method");
-}
diff -Nur -x '*.orig' -x '*.rej' smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/check_badrcptto_patterns mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/check_badrcptto_patterns
--- smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/check_badrcptto_patterns	2005-08-19 15:31:02.000000000 -0600
+++ mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/check_badrcptto_patterns	1969-12-31 17:00:00.000000000 -0700
@@ -1,57 +0,0 @@
-=pod
-
-=head1 SYNOPSIS
-
-This plugin checks the badrcptto_patterns config. This allows
-special patterns to be denied (e.g. percent hack, bangs, 
-double ats).
-
-=head1 CONFIG
-
-config/badrcptto_patterns
-
-Patterns are stored in the format pattern\sresponse, where pattern
-is a Perl pattern expression. Don't forget to tie the pattern if
-you want to restrict it from matching anywhere in the string.
-
-qpsmtpd already ensures that the address contains an @, with something
-to the left and right of the @.
-
-=head1 AUTHOR
-
-Copyright 2005 Gordon Rowell <gordonr@gormand.com.au>
-
-This software is free software and may be distributed under the same 
-terms as Perl itself.
-
-=head1 VERSION
-
-Version: $Id: $
-
-=cut
-
-sub register
-{
-  my ($self, $qp) = @_;
-  $self->register_hook("rcpt", "check_for_badrcptto_patterns");
-}
-
-sub check_for_badrcptto_patterns
-{
-  my ($self, $transaction, $recipient) = @_;
-
-  return (DECLINED) if $self->qp->connection->relay_client();
-
-  my @badrcptto = $self->qp->config("badrcptto_patterns") or return (DECLINED);
-  my $host = lc $recipient->host;
-  my $to = lc($recipient->user) . '@' . $host;
-
-  for (@badrcptto)
-  {
-      my ($pattern, $response) = split /\s+/, $_, 2;
-
-      return (DENY, $response) if ($to =~ /$pattern/);
-  }
-
-  return (DECLINED);
-}
diff -Nur -x '*.orig' -x '*.rej' smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/check_norelay mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/check_norelay
--- smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/check_norelay	2005-08-19 15:31:02.000000000 -0600
+++ mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/check_norelay	1969-12-31 17:00:00.000000000 -0700
@@ -1,66 +0,0 @@
-=pod
-
-=head1 SYNOPSIS
-
-This plugin checks the norelayclients config file to see if 
-relaying is denied.
-
-This allows specific clients, such as the gateway, to be denied 
-relaying, even though they would be allowed relaying by the 
-relayclients file.
-
-=head1 CONFIG
-
-config/norelayclients
-
-Each line is:
-- a full IP address
-- partial IP address terminated by a dot for matching whole networks
-  e.g. 192.168.42.
-
-=head1 BUGS AND LIMITATIONS
-
-This plugin does not have a more_norelayclients map equivalent
-of the more_relayclients map of the check_relay plugin.
-
-=head1 AUTHOR
-
-Based on check_relay plugin from the qpsmtpd distribution.
-
-Copyright 2005 Gordon Rowell <gordonr@gormand.com.au>
-
-This software is free software and may be distributed under the same
-terms as Perl itself.
-
-=head1 VERSION
-
-Version $Id: $
-
-=cut
-
-sub register {
-  my ($self, $qp) = @_;
-  $self->register_hook("connect", "check_norelay");
-}
-
-sub check_norelay {
-  my ($self, $transaction) = @_;
-  my $connection = $self->qp->connection;
-
-  # Check if this IP is not allowed to relay
-  my @no_relay_clients = $self->qp->config("norelayclients");
-  my %no_relay_clients = map { $_ => 1 } @no_relay_clients;
-  my $client_ip = $self->qp->connection->remote_ip;
-  while ($client_ip) {
-    if ( exists($no_relay_clients{$client_ip}) )
-    {
-      $connection->relay_client(0);
-      delete $ENV{RELAYCLIENT};
-      $self->log(LOGNOTICE, "check_norelay: $client_ip denied relaying");
-      last;
-    }
-    $client_ip =~ s/\d+\.?$//; # strip off another 8 bits
-  }
-  
-  return (DECLINED);
-}
diff -Nur -x '*.orig' -x '*.rej' smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/virus/pattern_filter mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/virus/pattern_filter
--- smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/virus/pattern_filter	2005-04-29 15:49:08.000000000 -0600
+++ mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/lib/qpsmtpd/plugins/virus/pattern_filter	1969-12-31 17:00:00.000000000 -0700
@@ -1,190 +0,0 @@
-=head1 NAME
-
-pattern_filter
-
-=head1 DESCRIPTION
-
-pattern_filter blocks executable (and other) attachments by matching 
-each line in a message against a set of known signatures. If a match is 
-found, the email is denied.
-
-Signatures are stored one per line in signature files in the qpsmtpd
-config directory. pattern_filter currently supports 
-'signature_exe' and 'signature_zip' files.
-
-This version is heavily based on Gavin Carr's exe_filter, but implemented
-so as not to care about MIME boundaries. This traps mangled MIME mail
-which is still interpreted by some mail clients. However, bare lines
-which happen to contain the pattern will match.
-
-This approach has the added advantage of reading the spool file directly,
-rather than reassembling the message in memory for Email::MIME to parse.
-
-=head1 CONFIG
-
-The following parameters can be passed to pattern_filter, or set in a
-'pattern_filter' config file.
-
-=over 4
-
-=item check <suffixes>
-
-where <suffixes> is a comma-separated list of suffixes to check e.g.
-
-  check exe,zip
-
-A corresponding 'signature_<suffix>' file should exist for each supplied
-suffix.
-
-Default: 'check patterns'.
-
-Note: this argument used to be called 'deny', which is now deprecated but 
-still functional.
-
-=item action <action>
-
-The action to take when a signature match is found. Valid values are 'deny'
-(the default), to DENY the mail, and 'note', to record a transaction note 
-for some later plugin (and then DECLINE). If action is 'note', the default 
-note name is 'virus_score', with a default value of 1. These defaults can 
-be modified using an extended note syntax - 'note:NAME=VALUE' e.g.
-
-  action note:virus_score=1                # default settings
-  action note:pattern_filter=virus_found       # random example
-
-Numeric note values are accumulated, not replaced.
-
-Default: 'action deny'.
-
-=back
-
-The following parameter can be passed to pattern_filter in 
-config/plugins (but not set via a config file):
-
-=over 4
-
-=item per_recipient 1
-
-Allow per-recipient configs to be used (using the per_user_config plugin).
-Default: 0.
-
-=back
-
-
-=head1 BUGS AND LIMITATIONS
-
-pattern_filter is a simple pattern - it does not unpack and scan
-archives for executables like a full-blown virus scanner. Likewise, zip
-filtering blocks *all* zip files, not just those that contain a virus. You
-should use a proper virus scanner if that's what you need.
-
-Because pattern_filter is a post_data plugin, it cannot handle different
-configurations in per_recipient mode. This means that if you want to use
-per_recipient configurations, you should also enforce that only compatible
-recipients occur in a single mail (e.g. using a plugin like
-denysoft_multi_rcpt).
-
-=head1 AUTHOR
-
-Written by Gordon Rowell <gordonr@gormand.com.au>, heavily based on 
-the following:
-
-Written by Gavin Carr <gavin@openfusion.com.au>, inspired by Russ Nelson's 
-viruscan patch to qmail-smtpd 
-(http://www.qmail.org/qmail-smtpd-viruscan-1.2.patch).
-
-=head1 COPYRIGHT
-
-Copyright 2005 Gordon Rowell <gordonr@gormand.com.au>
-Copyright 2004 Gavin Carr <gavin@openfusion.com.au>
-
-Copyright 2005 Gordon Rowell <gordonr@gormand.com.au>
-
-This software is free software and may be distributed under the same
-terms as Perl itself.
-
-=cut
-
-# use Email::MIME;
-
-#my $VERSION = 0.04;
-my $VERSION = 0.01;
-my %DEFAULTS = ( deny => 'patterns', action => 'deny', per_recipient => 0 );
-
-sub register {
-  my ($self, $qp, %arg) = @_;
-  $self->{_config_defaults} = { %DEFAULTS, %arg };
-  $self->register_hook("rcpt", "setup_config") if $arg{per_recipient};
-  $self->register_hook("data_post", "pattern_filter");
-}
-
-sub setup_config {
-  my ($self, $transaction, $rcpt) = @_;
-
-  # Setup only once
-  return DECLINED if $self->{_config};
-  return DECLINED 
-    unless ref $self->{_config_defaults} eq 'HASH';
-
-  # Setup config from defaults and per_recipient pattern_filter config
-  my @config = $self->qp->config('pattern_filter', { rcpt => $rcpt });
-  $self->{_config} = { 
-    %{$self->{_config_defaults}},
-    rcpt => $rcpt,
-    @config ? map { split /\s+/, $_, 2 } @config : ()
-  };
-  return DECLINED;
-}
-
-sub pattern_filter {
-  my ($self, $transaction) = @_;
-
-  # Setup config parameters if not already done
-  my $config = $self->{_config};
-  unless ($config) {
-    my @config = $self->qp->config('pattern_filter'); 
-    $config = {
-      %{$self->{_config_defaults}},
-      @config ? map { split /\s+/, $_, 2 } @config : ()
-    };
-  };
-  $config->{check} ||= $config->{deny};
-  return DECLINED unless $config->{check};
-
-  # Load signatures
-  my %sig = ();
-  my $config_arg = $config->{rcpt} ? { rcpt => $config->{rcpt} } : {};
-  for my $suffix (split /\s*,\s*/, $config->{check}) {
-    my @sig = $self->qp->config("signatures_$suffix", $config_arg);
-    $self->log(3, "warning - no signatures_$suffix loaded") unless @sig;
-    $sig{$suffix} = \@sig if @sig;
-  }
-  return DECLINED unless keys %sig;
-
-  $transaction->body_resetpos;
-
-  my ($status,$msg);
-
-  while ($_ = $transaction->body_getline)
-  {
-    for my $suffix (sort keys %sig)
-    {
-      for my $s (@{$sig{$suffix}})
-      {
-        next unless $s;
-        if ($_ =~ m/^\Q$s/)
-	{
-          # Match - deny!
-          $self->log(6, "the following line matched $suffix sig '$s':\n$_");
-	  return (DENY, "We don't accept email with executable content [$s]."); 
-
-	}
-      }
-    }
-  }
-
-  return DECLINED;
-
-}
-
-# arch-tag: 3fc272f2-9d52-42d4-893b-032b529ec71d
diff -Nur -x '*.orig' -x '*.rej' smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/auth/auth_cvm_unix_local mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/auth/auth_cvm_unix_local
--- smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/auth/auth_cvm_unix_local	1969-12-31 17:00:00.000000000 -0700
+++ mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/auth/auth_cvm_unix_local	2005-08-19 15:31:02.000000000 -0600
@@ -0,0 +1,109 @@
+#!/usr/bin/perl -w
+
+=head1 NAME
+
+auth_cvm_unix_local - SMTP AUTH LOGIN module using 
+Bruce Guenther's Credential Validation Module (CVM) 
+    http://untroubled.org/cvm/
+
+=head1 SYNOPSIS
+
+In config/plugins:
+
+  auth/auth_cvm_unix_local \
+	cvm_socket /var/lib/cvm/cvm-unix-local.socket	\
+	enable_smtp no \
+	enable_ssmtp yes
+
+=head1 BUGS
+
+- Should probably handle auth-cram-md5 as well. However, this requires
+access to the plain text password. We could store a separate database
+of passwords purely for SMTP AUTH, for example as an optional 
+SMTPAuthPassword property of an account in the esmith::AccountsDB;
+
+- Returns DENY if AUTH fails - there should probably be an option of 
+  DECLINE or DENY.
+
+=head1 DESCRIPTION
+
+This plugin implements an authentication plugin using Bruce Guenther's
+Credential Validation Module (http://untroubled.org/cvm).
+
+=head1 AUTHOR
+
+Copyright 2005 Gordon Rowell <gordonr@gormand.com.au>
+
+This software is free software and may be distributed or modified
+under the same terms as Perl itself.
+
+=head1 VERSION
+
+Version $Id: auth_cvm_unix_local,v 1.1 2005/06/09 22:50:06 gordonr Exp gordonr $
+
+=cut
+
+use Socket;
+use constant SMTP_PORT => getservbyname("smtp", "tcp") || 25;
+use constant SSMTP_PORT => getservbyname("ssmtp", "tcp") || 465;
+
+sub register 
+{
+    my ( $self, $qp, %arg ) = @_;
+
+    unless ($arg{cvm_socket})
+    {
+        $self->log(LOGERROR, "authcvm - requires cvm_socket argument");
+        return 0;
+    }
+
+    $self->{_enable_smtp} = $arg{enable_smtp} || 'no';
+    $self->{_enable_ssmtp} = $arg{enable_ssmtp} || 'yes';
+
+    my $port = $ENV{PORT} || SMTP_PORT;
+
+    return 0 if ($port == SMTP_PORT and $self->{_enable_smtp} ne 'yes');
+    return 0 if ($port == SSMTP_PORT and $self->{_enable_ssmtp} ne 'yes');
+
+    if ($arg{cvm_socket} =~ /^([\w\/.-]+)$/)
+    {
+        $self->{_cvm_socket} = $1;
+    }
+
+    unless (-S $self->{_cvm_socket})
+    {
+	$self->log(LOGERROR, "authcvm - cvm_socket missing or not usable");
+	return 0;
+    }
+
+    $self->register_hook("auth-plain", "authcvm_plain");
+    $self->register_hook("auth-login", "authcvm_plain");
+#    $self->register_hook("auth-cram-md5", "authcvm_hash");
+}
+
+sub authcvm_plain
+{
+    my ( $self, $transaction, $method, $user, $passClear, $passHash, $ticket ) =
+      @_;
+
+    $self->log(LOGINFO, "authcvm/$method authentication attempt for: $user");
+
+    socket(SOCK, PF_UNIX, SOCK_STREAM, 0) 
+        or return (DENY, "authcvm/$method");
+
+    connect(SOCK, sockaddr_un($self->{_cvm_socket}))
+        or return (DENY, "authcvm/$method");
+
+    my $o = select(SOCK); $| = 1; select($o);
+
+    my ($u, $host) = split(/\@/, $user);
+    $host ||= "localhost";
+
+    print SOCK "\001$u\000$host\000$passClear\000\000";
+
+    shutdown SOCK, 1;
+
+    my $ret = <SOCK>;
+    my ($s) = unpack ("C", $ret);
+    return (($s ? DENY : OK), "authcvm/$method");
+}
diff -Nur -x '*.orig' -x '*.rej' smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_badrcptto_patterns mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_badrcptto_patterns
--- smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_badrcptto_patterns	1969-12-31 17:00:00.000000000 -0700
+++ mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_badrcptto_patterns	2005-08-19 15:31:02.000000000 -0600
@@ -0,0 +1,57 @@
+=pod
+
+=head1 SYNOPSIS
+
+This plugin checks the badrcptto_patterns config. This allows
+special patterns to be denied (e.g. percent hack, bangs, 
+double ats).
+
+=head1 CONFIG
+
+config/badrcptto_patterns
+
+Patterns are stored in the format pattern\sresponse, where pattern
+is a Perl pattern expression. Don't forget to tie the pattern if
+you want to restrict it from matching anywhere in the string.
+
+qpsmtpd already ensures that the address contains an @, with something
+to the left and right of the @.
+
+=head1 AUTHOR
+
+Copyright 2005 Gordon Rowell <gordonr@gormand.com.au>
+
+This software is free software and may be distributed under the same 
+terms as Perl itself.
+
+=head1 VERSION
+
+Version: $Id: $
+
+=cut
+
+sub register
+{
+  my ($self, $qp) = @_;
+  $self->register_hook("rcpt", "check_for_badrcptto_patterns");
+}
+
+sub check_for_badrcptto_patterns
+{
+  my ($self, $transaction, $recipient) = @_;
+
+  return (DECLINED) if $self->qp->connection->relay_client();
+
+  my @badrcptto = $self->qp->config("badrcptto_patterns") or return (DECLINED);
+  my $host = lc $recipient->host;
+  my $to = lc($recipient->user) . '@' . $host;
+
+  for (@badrcptto)
+  {
+      my ($pattern, $response) = split /\s+/, $_, 2;
+
+      return (DENY, $response) if ($to =~ /$pattern/);
+  }
+
+  return (DECLINED);
+}
diff -Nur -x '*.orig' -x '*.rej' smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_norelay mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_norelay
--- smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_norelay	1969-12-31 17:00:00.000000000 -0700
+++ mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_norelay	2005-08-19 15:31:02.000000000 -0600
@@ -0,0 +1,66 @@
+=pod
+
+=head1 SYNOPSIS
+
+This plugin checks the norelayclients config file to see if 
+relaying is denied.
+
+This allows specific clients, such as the gateway, to be denied 
+relaying, even though they would be allowed relaying by the 
+relayclients file.
+
+=head1 CONFIG
+
+config/norelayclients
+
+Each line is:
+- a full IP address
+- partial IP address terminated by a dot for matching whole networks
+  e.g. 192.168.42.
+
+=head1 BUGS AND LIMITATIONS
+
+This plugin does not have a more_norelayclients map equivalent
+of the more_relayclients map of the check_relay plugin.
+
+=head1 AUTHOR
+
+Based on check_relay plugin from the qpsmtpd distribution.
+
+Copyright 2005 Gordon Rowell <gordonr@gormand.com.au>
+
+This software is free software and may be distributed under the same
+terms as Perl itself.
+
+=head1 VERSION
+
+Version $Id: $
+
+=cut
+
+sub register {
+  my ($self, $qp) = @_;
+  $self->register_hook("connect", "check_norelay");
+}
+
+sub check_norelay {
+  my ($self, $transaction) = @_;
+  my $connection = $self->qp->connection;
+
+  # Check if this IP is not allowed to relay
+  my @no_relay_clients = $self->qp->config("norelayclients");
+  my %no_relay_clients = map { $_ => 1 } @no_relay_clients;
+  my $client_ip = $self->qp->connection->remote_ip;
+  while ($client_ip) {
+    if ( exists($no_relay_clients{$client_ip}) )
+    {
+      $connection->relay_client(0);
+      delete $ENV{RELAYCLIENT};
+      $self->log(LOGNOTICE, "check_norelay: $client_ip denied relaying");
+      last;
+    }
+    $client_ip =~ s/\d+\.?$//; # strip off another 8 bits
+  }
+  
+  return (DECLINED);
+}
diff -Nur -x '*.orig' -x '*.rej' smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/virus/pattern_filter mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/virus/pattern_filter
--- smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/virus/pattern_filter	1969-12-31 17:00:00.000000000 -0700
+++ mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/virus/pattern_filter	2005-04-29 15:49:08.000000000 -0600
@@ -0,0 +1,190 @@
+=head1 NAME
+
+pattern_filter
+
+=head1 DESCRIPTION
+
+pattern_filter blocks executable (and other) attachments by matching 
+each line in a message against a set of known signatures. If a match is 
+found, the email is denied.
+
+Signatures are stored one per line in signature files in the qpsmtpd
+config directory. pattern_filter currently supports 
+'signature_exe' and 'signature_zip' files.
+
+This version is heavily based on Gavin Carr's exe_filter, but implemented
+so as not to care about MIME boundaries. This traps mangled MIME mail
+which is still interpreted by some mail clients. However, bare lines
+which happen to contain the pattern will match.
+
+This approach has the added advantage of reading the spool file directly,
+rather than reassembling the message in memory for Email::MIME to parse.
+
+=head1 CONFIG
+
+The following parameters can be passed to pattern_filter, or set in a
+'pattern_filter' config file.
+
+=over 4
+
+=item check <suffixes>
+
+where <suffixes> is a comma-separated list of suffixes to check e.g.
+
+  check exe,zip
+
+A corresponding 'signature_<suffix>' file should exist for each supplied
+suffix.
+
+Default: 'check patterns'.
+
+Note: this argument used to be called 'deny', which is now deprecated but 
+still functional.
+
+=item action <action>
+
+The action to take when a signature match is found. Valid values are 'deny'
+(the default), to DENY the mail, and 'note', to record a transaction note 
+for some later plugin (and then DECLINE). If action is 'note', the default 
+note name is 'virus_score', with a default value of 1. These defaults can 
+be modified using an extended note syntax - 'note:NAME=VALUE' e.g.
+
+  action note:virus_score=1                # default settings
+  action note:pattern_filter=virus_found       # random example
+
+Numeric note values are accumulated, not replaced.
+
+Default: 'action deny'.
+
+=back
+
+The following parameter can be passed to pattern_filter in 
+config/plugins (but not set via a config file):
+
+=over 4
+
+=item per_recipient 1
+
+Allow per-recipient configs to be used (using the per_user_config plugin).
+Default: 0.
+
+=back
+
+
+=head1 BUGS AND LIMITATIONS
+
+pattern_filter is a simple pattern - it does not unpack and scan
+archives for executables like a full-blown virus scanner. Likewise, zip
+filtering blocks *all* zip files, not just those that contain a virus. You
+should use a proper virus scanner if that's what you need.
+
+Because pattern_filter is a post_data plugin, it cannot handle different
+configurations in per_recipient mode. This means that if you want to use
+per_recipient configurations, you should also enforce that only compatible
+recipients occur in a single mail (e.g. using a plugin like
+denysoft_multi_rcpt).
+
+=head1 AUTHOR
+
+Written by Gordon Rowell <gordonr@gormand.com.au>, heavily based on 
+the following:
+
+Written by Gavin Carr <gavin@openfusion.com.au>, inspired by Russ Nelson's 
+viruscan patch to qmail-smtpd 
+(http://www.qmail.org/qmail-smtpd-viruscan-1.2.patch).
+
+=head1 COPYRIGHT
+
+Copyright 2005 Gordon Rowell <gordonr@gormand.com.au>
+Copyright 2004 Gavin Carr <gavin@openfusion.com.au>
+
+Copyright 2005 Gordon Rowell <gordonr@gormand.com.au>
+
+This software is free software and may be distributed under the same
+terms as Perl itself.
+
+=cut
+
+# use Email::MIME;
+
+#my $VERSION = 0.04;
+my $VERSION = 0.01;
+my %DEFAULTS = ( deny => 'patterns', action => 'deny', per_recipient => 0 );
+
+sub register {
+  my ($self, $qp, %arg) = @_;
+  $self->{_config_defaults} = { %DEFAULTS, %arg };
+  $self->register_hook("rcpt", "setup_config") if $arg{per_recipient};
+  $self->register_hook("data_post", "pattern_filter");
+}
+
+sub setup_config {
+  my ($self, $transaction, $rcpt) = @_;
+
+  # Setup only once
+  return DECLINED if $self->{_config};
+  return DECLINED 
+    unless ref $self->{_config_defaults} eq 'HASH';
+
+  # Setup config from defaults and per_recipient pattern_filter config
+  my @config = $self->qp->config('pattern_filter', { rcpt => $rcpt });
+  $self->{_config} = { 
+    %{$self->{_config_defaults}},
+    rcpt => $rcpt,
+    @config ? map { split /\s+/, $_, 2 } @config : ()
+  };
+  return DECLINED;
+}
+
+sub pattern_filter {
+  my ($self, $transaction) = @_;
+
+  # Setup config parameters if not already done
+  my $config = $self->{_config};
+  unless ($config) {
+    my @config = $self->qp->config('pattern_filter'); 
+    $config = {
+      %{$self->{_config_defaults}},
+      @config ? map { split /\s+/, $_, 2 } @config : ()
+    };
+  };
+  $config->{check} ||= $config->{deny};
+  return DECLINED unless $config->{check};
+
+  # Load signatures
+  my %sig = ();
+  my $config_arg = $config->{rcpt} ? { rcpt => $config->{rcpt} } : {};
+  for my $suffix (split /\s*,\s*/, $config->{check}) {
+    my @sig = $self->qp->config("signatures_$suffix", $config_arg);
+    $self->log(3, "warning - no signatures_$suffix loaded") unless @sig;
+    $sig{$suffix} = \@sig if @sig;
+  }
+  return DECLINED unless keys %sig;
+
+  $transaction->body_resetpos;
+
+  my ($status,$msg);
+
+  while ($_ = $transaction->body_getline)
+  {
+    for my $suffix (sort keys %sig)
+    {
+      for my $s (@{$sig{$suffix}})
+      {
+        next unless $s;
+        if ($_ =~ m/^\Q$s/)
+	{
+          # Match - deny!
+          $self->log(6, "the following line matched $suffix sig '$s':\n$_");
+	  return (DENY, "We don't accept email with executable content [$s]."); 
+
+	}
+      }
+    }
+  }
+
+  return DECLINED;
+
+}
+
+# arch-tag: 3fc272f2-9d52-42d4-893b-032b529ec71d
