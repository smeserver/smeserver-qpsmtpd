diff -Nur -x '*.orig' -x '*.rej' smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/auth/auth_cvm_unix_local mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/auth/auth_cvm_unix_local
--- smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/auth/auth_cvm_unix_local	2005-08-29 03:15:21.274890768 -0600
+++ mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/auth/auth_cvm_unix_local	1969-12-31 17:00:00.000000000 -0700
@@ -1,109 +0,0 @@
-#!/usr/bin/perl -w
-
-=head1 NAME
-
-auth_cvm_unix_local - SMTP AUTH LOGIN module using 
-Bruce Guenther's Credential Validation Module (CVM) 
-    http://untroubled.org/cvm/
-
-=head1 SYNOPSIS
-
-In config/plugins:
-
-  auth/auth_cvm_unix_local \
-	cvm_socket /var/lib/cvm/cvm-unix-local.socket	\
-	enable_smtp no \
-	enable_ssmtp yes
-
-=head1 BUGS
-
-- Should probably handle auth-cram-md5 as well. However, this requires
-access to the plain text password. We could store a separate database
-of passwords purely for SMTP AUTH, for example as an optional 
-SMTPAuthPassword property of an account in the esmith::AccountsDB;
-
-- Returns DENY if AUTH fails - there should probably be an option of 
-  DECLINE or DENY.
-
-=head1 DESCRIPTION
-
-This plugin implements an authentication plugin using Bruce Guenther's
-Credential Validation Module (http://untroubled.org/cvm).
-
-=head1 AUTHOR
-
-Copyright 2005 Gordon Rowell <gordonr@gormand.com.au>
-
-This software is free software and may be distributed or modified
-under the same terms as Perl itself.
-
-=head1 VERSION
-
-Version $Id: auth_cvm_unix_local,v 1.1 2005/06/09 22:50:06 gordonr Exp gordonr $
-
-=cut
-
-use Socket;
-use constant SMTP_PORT => getservbyname("smtp", "tcp") || 25;
-use constant SSMTP_PORT => getservbyname("ssmtp", "tcp") || 465;
-
-sub register 
-{
-    my ( $self, $qp, %arg ) = @_;
-
-    unless ($arg{cvm_socket})
-    {
-        $self->log(LOGERROR, "authcvm - requires cvm_socket argument");
-        return 0;
-    }
-
-    $self->{_enable_smtp} = $arg{enable_smtp} || 'no';
-    $self->{_enable_ssmtp} = $arg{enable_ssmtp} || 'yes';
-
-    my $port = $ENV{PORT} || SMTP_PORT;
-
-    return 0 if ($port == SMTP_PORT and $self->{_enable_smtp} ne 'yes');
-    return 0 if ($port == SSMTP_PORT and $self->{_enable_ssmtp} ne 'yes');
-
-    if ($arg{cvm_socket} =~ /^([\w\/.-]+)$/)
-    {
-        $self->{_cvm_socket} = $1;
-    }
-
-    unless (-S $self->{_cvm_socket})
-    {
-	$self->log(LOGERROR, "authcvm - cvm_socket missing or not usable");
-	return 0;
-    }
-
-    $self->register_hook("auth-plain", "authcvm_plain");
-    $self->register_hook("auth-login", "authcvm_plain");
-#    $self->register_hook("auth-cram-md5", "authcvm_hash");
-}
-
-sub authcvm_plain
-{
-    my ( $self, $transaction, $method, $user, $passClear, $passHash, $ticket ) =
-      @_;
-
-    $self->log(LOGINFO, "authcvm/$method authentication attempt for: $user");
-
-    socket(SOCK, PF_UNIX, SOCK_STREAM, 0) 
-        or return (DENY, "authcvm/$method");
-
-    connect(SOCK, sockaddr_un($self->{_cvm_socket}))
-        or return (DENY, "authcvm/$method");
-
-    my $o = select(SOCK); $| = 1; select($o);
-
-    my ($u, $host) = split(/\@/, $user);
-    $host ||= "localhost";
-
-    print SOCK "\001$u\000$host\000$passClear\000\000";
-
-    shutdown SOCK, 1;
-
-    my $ret = <SOCK>;
-    my ($s) = unpack ("C", $ret);
-    return (($s ? DENY : OK), "authcvm/$method");
-}
diff -Nur -x '*.orig' -x '*.rej' smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_badrcptto_patterns mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_badrcptto_patterns
--- smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_badrcptto_patterns	2005-08-29 03:15:21.277890312 -0600
+++ mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_badrcptto_patterns	1969-12-31 17:00:00.000000000 -0700
@@ -1,57 +0,0 @@
-=pod
-
-=head1 SYNOPSIS
-
-This plugin checks the badrcptto_patterns config. This allows
-special patterns to be denied (e.g. percent hack, bangs, 
-double ats).
-
-=head1 CONFIG
-
-config/badrcptto_patterns
-
-Patterns are stored in the format pattern\sresponse, where pattern
-is a Perl pattern expression. Don't forget to tie the pattern if
-you want to restrict it from matching anywhere in the string.
-
-qpsmtpd already ensures that the address contains an @, with something
-to the left and right of the @.
-
-=head1 AUTHOR
-
-Copyright 2005 Gordon Rowell <gordonr@gormand.com.au>
-
-This software is free software and may be distributed under the same 
-terms as Perl itself.
-
-=head1 VERSION
-
-Version: $Id: $
-
-=cut
-
-sub register
-{
-  my ($self, $qp) = @_;
-  $self->register_hook("rcpt", "check_for_badrcptto_patterns");
-}
-
-sub check_for_badrcptto_patterns
-{
-  my ($self, $transaction, $recipient) = @_;
-
-  return (DECLINED) if $self->qp->connection->relay_client();
-
-  my @badrcptto = $self->qp->config("badrcptto_patterns") or return (DECLINED);
-  my $host = lc $recipient->host;
-  my $to = lc($recipient->user) . '@' . $host;
-
-  for (@badrcptto)
-  {
-      my ($pattern, $response) = split /\s+/, $_, 2;
-
-      return (DENY, $response) if ($to =~ /$pattern/);
-  }
-
-  return (DECLINED);
-}
diff -Nur -x '*.orig' -x '*.rej' smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_norelay mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_norelay
--- smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_norelay	2005-08-29 03:15:21.280889856 -0600
+++ mezzanine_patched_smeserver-qpsmtpd-1.0.0/root/usr/share/qpsmtpd/plugins/check_norelay	1969-12-31 17:00:00.000000000 -0700
@@ -1,66 +0,0 @@
-=pod
-
-=head1 SYNOPSIS
-
-This plugin checks the norelayclients config file to see if 
-relaying is denied.
-
-This allows specific clients, such as the gateway, to be denied 
-relaying, even though they would be allowed relaying by the 
-relayclients file.
-
-=head1 CONFIG
-
-config/norelayclients
-
-Each line is:
-- a full IP address
-- partial IP address terminated by a dot for matching whole networks
-  e.g. 192.168.42.
-
-=head1 BUGS AND LIMITATIONS
-
-This plugin does not have a more_norelayclients map equivalent
-of the more_relayclients map of the check_relay plugin.
-
-=head1 AUTHOR
-
-Based on check_relay plugin from the qpsmtpd distribution.
-
-Copyright 2005 Gordon Rowell <gordonr@gormand.com.au>
-
-This software is free software and may be distributed under the same
-terms as Perl itself.
-
-=head1 VERSION
-
-Version $Id: $
-
-=cut
-
-sub register {
-  my ($self, $qp) = @_;
-  $self->register_hook("connect", "check_norelay");
-}
-
-sub check_norelay {
-  my ($self, $transaction) = @_;
-  my $connection = $self->qp->connection;
-
-  # Check if this IP is not allowed to relay
-  my @no_relay_clients = $self->qp->config("norelayclients");
-  my %no_relay_clients = map { $_ => 1 } @no_relay_clients;
-  my $client_ip = $self->qp->connection->remote_ip;
-  while ($client_ip) {
-    if ( exists($no_relay_clients{$client_ip}) )
-    {
-      $connection->relay_client(0);
-      delete $ENV{RELAYCLIENT};
-      $self->log(LOGNOTICE, "check_norelay: $client_ip denied relaying");
-      last;
-    }
-    $client_ip =~ s/\d+\.?$//; # strip off another 8 bits
-  }
-  
-  return (DECLINED);
-}
